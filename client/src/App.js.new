import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';

// Page components
import Home from './pages/Home';
import Login from './pages/Login';
import Signup from './pages/Signup';
import BookCatalog from './pages/BookCatalog';
import BookDetails from './pages/BookDetails';
import AdminPanel from './pages/AdminPanel';

// Utility components
import { jwtDecode } from 'jwt-decode';

// Custom route guard component for protected routes
const ProtectedRoute = ({ children, redirectPath = '/login', isAllowed }) => {
  return isAllowed ? children : <Navigate to={redirectPath} replace />;
};

function App() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [authChecked, setAuthChecked] = useState(false);

  useEffect(() => {
    // Check for authentication on app load
    const validateAuth = () => {
      console.log('Validating authentication...');
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('No token found');
        setLoading(false);
        setAuthChecked(true);
        return;
      }

      try {
        console.log('Decoding token...');
        const decoded = jwtDecode(token);
        console.log('Token decoded:', decoded);
        
        // Check if token has required fields
        if (!decoded.userId) {
          console.error('Token missing userId');
          localStorage.removeItem('token');
          setUser(null);
          return;
        }
        
        // Check if token is expired
        const currentTime = Date.now() / 1000;
        if (decoded.exp && decoded.exp < currentTime) {
          console.log('Token expired');
          localStorage.removeItem('token');
          setUser(null);
        } else {
          console.log('Token valid, user authenticated');
          setUser(decoded);
        }
      } catch (error) {
        console.error('Token validation failed:', error);
        localStorage.removeItem('token');
      } finally {
        setLoading(false);
        setAuthChecked(true);
      }
    };

    validateAuth();
  }, []);

  // Display loading state while checking authentication
  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen bg-gray-100">
        <div className="animate-pulse text-xl font-semibold">Loading...</div>
      </div>
    );
  }

  return (
    <Router>
      <Routes>
        {/* Public routes */}
        <Route path="/login" element={user ? <Navigate to="/" replace /> : <Login />} />
        <Route path="/signup" element={user ? <Navigate to="/" replace /> : <Signup />} />
        
        {/* Home page - accessible to all but shows different content based on auth */}
        <Route path="/" element={<Home user={user} />} />
        
        {/* Book catalog - accessible to all */}
        <Route path="/catalog" element={<BookCatalog user={user} />} />
        <Route path="/books/:id" element={<BookDetails user={user} />} />
        
        {/* Protected routes */}
        <Route 
          path="/admin/*" 
          element={
            <ProtectedRoute 
              isAllowed={user && user.role === 'admin'} 
              redirectPath="/"
            >
              <AdminPanel />
            </ProtectedRoute>
          }
        />
        
        {/* Default redirect for unknown routes */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </Router>
  );
}

export default App;
