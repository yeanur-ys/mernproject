const express = require('express');
const Borrow = require('../models/Borrow');
const Book = require('../models/Book');
const User = require('../models/User');
const authenticateJWT = require('../middleware/auth.js.new');
const router = express.Router();

// Helper function to calculate due date (1 week from current date)
function calculateDueDate() {
  const dueDate = new Date();
  dueDate.setDate(dueDate.getDate() + 7); // 7 days from now
  return dueDate;
}

// Helper function to calculate late fees
function calculateFine(dueDate, returnDate) {
  if (!returnDate) returnDate = new Date();
  
  // No fine if returned before due date
  if (returnDate <= dueDate) return 0;
  
  // Calculate days late
  const daysLate = Math.ceil((returnDate - dueDate) / (1000 * 60 * 60 * 24));
  
  // $1 per day late
  return daysLate * 1;
}

// GET all borrows (admin only)
router.get('/', authenticateJWT, async (req, res) => {
  try {
    // Check if admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Not authorized. Admin access required.' });
    }
    
    const borrows = await Borrow.find()
      .populate('userId', 'name email')
      .populate('bookId', 'title author imageUrl');
      
    res.json(borrows);
  } catch (err) {
    console.error('Error fetching borrows:', err);
    res.status(500).json({ message: 'Error fetching borrow records' });
  }
});

// GET user's borrows
router.get('/user', authenticateJWT, async (req, res) => {
  try {
    console.log('Getting borrows for user:', req.user);
    if (!req.user || !req.user.userId) {
      return res.status(401).json({ message: 'User ID not found in token' });
    }

    const borrows = await Borrow.find({ userId: req.user.userId })
      .populate('bookId', 'title author imageUrl');
    
    console.log(`Found ${borrows.length} borrows for user ${req.user.userId}`);
      
    // Calculate current late fees for books not yet returned
    const borrowsWithUpdatedFees = borrows.map(borrow => {
      const borrowObj = borrow.toObject();
      
      // If not returned yet, calculate current fee
      if (!borrowObj.returnDate) {
        borrowObj.currentFine = calculateFine(borrowObj.dueDate, new Date());
      }
      
      return borrowObj;
    });
    
    res.json(borrowsWithUpdatedFees);
  } catch (err) {
    console.error('Error fetching user borrows:', err);
    res.status(500).json({ message: 'Error fetching your borrowed books' });
  }
});

// POST /borrow - Borrow a book
router.post('/borrow', authenticateJWT, async (req, res) => {
  console.log('Borrow request received:', req.body);
  console.log('User from token:', req.user);
  
  // Validate user info from token
  if (!req.user || !req.user.userId) {
    console.error('Missing user ID in token payload');
    return res.status(401).json({ message: 'Authentication error: User ID missing from token' });
  }
  
  const { bookId } = req.body;
  if (!bookId) {
    return res.status(400).json({ message: 'Book ID is required' });
  }
  
  const dueDate = calculateDueDate();
  console.log('Due date calculated:', dueDate);
  console.log('User ID from token:', req.user.userId);

  // Use a session/transaction to ensure database consistency
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // Check if the user exists
    const userExists = await User.findById(req.user.userId).session(session);
    if (!userExists) {
      console.error(`User with ID ${req.user.userId} not found in database`);
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'User not found in database' });
    }
    
    console.log('Looking for book with ID:', bookId);
    const book = await Book.findById(bookId).session(session);
    console.log('Book found:', book ? 'Yes' : 'No');
    
    if (!book) {
      await session.abortTransaction();
      session.endSession();
      return res.status(404).json({ message: 'Book not found' });
    }
    
    // Check if the book is available
    if (!book.isAvailable) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'This book is currently not available' });
    }
    
    // Check if user already has this book
    const existingBorrow = await Borrow.findOne({ 
      userId: req.user.userId,
      bookId: bookId,
      returnDate: null // Not yet returned
    }).session(session);
    
    if (existingBorrow) {
      await session.abortTransaction();
      session.endSession();
      return res.status(400).json({ message: 'You have already borrowed this book' });
    }

    // Create new borrow record
    const borrow = new Borrow({
      userId: req.user.userId,
      bookId,
      dueDate,
    });
    
    // Mark the book as unavailable
    book.isAvailable = false;
    book.currentBorrowerId = req.user.userId;
    book.borrowHistory.push(borrow._id);

    console.log('Saving borrow record...');
    await borrow.save({ session });
    console.log('Saving book update...');
    await book.save({ session });
    
    // Update user's borrowed books
    console.log('Updating user record...');
    await User.findByIdAndUpdate(
      req.user.userId, 
      { $push: { borrowedBooks: bookId } },
      { session }
    );
    
    await session.commitTransaction();
    session.endSession();
    
    console.log('Book borrowed successfully');
    res.status(201).json({ 
      message: 'Book borrowed successfully', 
      dueDate: dueDate,
      borrow: await borrow.populate('bookId', 'title author')
    });
  } catch (err) {
    await session.abortTransaction();
    session.endSession();
    console.error('Error borrowing book:', err);
    res.status(500).json({ message: 'Error borrowing book' });
  }
});

// Rest of the file remains the same...

module.exports = router;
